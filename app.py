import streamlit as st
#from streamlit_card import card
import pandas as pd
import os

# Detect theme preference
theme = st.get_option("theme.base")
if theme == "dark":
    bg_color = "#1e1b29"
    primary_color = "#6c6780"
else:
    bg_color = "#d9d4e7"
    primary_color = "#9692a1"

css = f"""
<style>
    /* Set right-to-left direction and custom font */
    html, body {{
        background-color: {bg_color};
        direction: rtl;
        text-align: right;
        font-family: 'Tajawal', sans-serif;
    }}
    [data-testid="stAppViewContainer"] {{
       background-color: {bg_color};
      
    }}
[data-testid="stHeader"] {{
       background-color: {bg_color};

    }}
    .stSelectbox select:focus {{
        border-color: {primary_color} ;  /* Change border color on focus */
        outline: none !important;  /* Remove default outline */
    }}

    /* Style for Streamlit buttons */
    .stButton>button {{
        background-color: {primary_color};
        color: white;
    }}

    /* Custom paragraph styles */
    .custom-paragraph {{
        font-size: 18px !important;
        line-height: 1.6;
        color: #3e3c40;
    }}

    /* Header colors */
    h1, h2, h3, h4, h5, h6 {{
        background-color: rgba(230, 230, 230, 0.3);
        color: #3e3c40;
    }}

    /* Custom hover effect for dropdown options */
    div[data-baseweb="select"] ul li:hover {{
        background-color: #f7b2a5 !important;  /* Hover background color */
        color: white;                        /* Hover text color */
    }}
</style>
"""


jadarat = pd.read_csv('jadarat_cleaned.csv')

st.markdown(css, unsafe_allow_html=True)

st.title("ูู ุงูุฌุงูุนุฉ ุฅูู ุงูุนุงูู ุงูุญูููู: ุงูุฎุฑูุฌูู ูุงูุจุญุซ ุนู ุงููุธุงุฆู๐ฉ๐ปโ๐๐จ๐ปโ๐")

col1, col2 = st.columns([7, 5])

with col1:
    img = os.path.join('imgs', 'grads-removebg-preview.png')
    st.image(img)
    

with col2:
    # Apply custom styling to the paragraph using the 'custom-paragraph' class
    st.markdown('<p class="custom-paragraph">ููุฐ ูุนููุฉ ุฃุธุงูุฑูุง ููุญู ูุฎุทู ุฎุทูุงุชู ูุฏุฑูุณุฉ ููู ูู ุฃูุจุฑ ููุง ููุชุนูู ูู ุฎุจุฑุงุช ูู ุณุจูููุง. ูุชุนูู ูู ูุฌููุนุงุชู ุชุดุจููุง ููุฏุฑุณ ูุนูุง ุงูููุงุฏ ุงูุฏุฑุงุณูุฉ ููุณูุงุ ุซู ููุชูู ุฅูู ุงูุฌุงูุนุฉุ ุญูุซ ููู ุชุดุงุจูููุงุ ูุชุฎุชูู ุชุฎุตุตุงุชูุงุ ูููุชูู ููู ูุฎุชูู ุนูุง. ูุจุนุฏ ุงูุฌุงูุนุฉุ ุชููููู ุฃูุฏููุง ุนู ุฃูุฏู ูู ุฃุฑุดุฏููุง ุทููุฉ ุงูุซูุงุซุฉ ูุงูุนุดุฑูู ุนุงููุง ุงููุงุถูุฉุ ููุจุฏุฃ ุฃููู ุฎุทูุงุชูุง ูู ุงูุนุงูู ุงูุญููููุ ุจูู ูู ูู ุฃูุซุฑ ููุง ุฎุจุฑุฉุ ููู ูู ุฃููุ ููู ูุดุจููููุง. ูุฑุบู ูู ูุฐู ุงูุงุฎุชูุงูุงุชุ ูุดุชุฑู ุฌููุนูุง ูู ูููุฉ ุดุงูุฉ ูุงุญุฏุฉ: ุงูุจุญุซ ุนู ูุธููุฉ. ูู ูุฐุง ุงูุนุงูู ุงููุงุณุนุ ูุฏ ุชุฌุฏ ููุณู ูุญูุฏูุง ุชุจุญุซ ุนููู ูุฑุดุฏูุ ูููุง ูุญู ูุน ุจูุงูุงุช ููุตุฉ ุฌุฏุงุฑุงุช ุญูููุงูุง ููุฑุดุฏู.</p>', unsafe_allow_html=True)
 


st.markdown('<h2> ุณูู ุงูุนูู ูุทูุจ ุญุฏูุซู ุงูุชุฎุฑุฌ ู ุงูุฃุดุฎุงุต ุจูุง ุฎุจุฑุฉ!</h2>', unsafe_allow_html=True)
st.image(os.path.join('imgs','st1.png'))
st.markdown('<p class="custom-paragraph">ุงูุฎุจุฑุฉ ูู ุงููุดุงูู ุงููุคุฑูุฉ ุฃุซูุงุก ุงูุจุญุซ ุนู ุงูุนูู ููู ุจูุงูุงุช ููุตุฉ ุฌุฏุงุฑุงุช ุชุจูู ุฃู ุงูุณูู ูุทูุจ ุญุฏูุซู ุงูุชุฎุฑุฌ ูุงูุฃุดุฎุงุต ุจูุง ุฎุจุฑุฉ ูู ุนุฏุฉ ูุฌุงูุงุช ูููุง: ุจุงุฆุนุ ููุธู ุงุณุชูุจุงูุ ููุฏูุจ ูุจูุนุงุชุ ูุบูุฑูุง ููู ูุงุฐุง ุนู ุงููุธุงุฆู ุงูุชู ุชุชุทูุจ ุดูุงุฏุงุช ุฌุงูุนูุฉุ</p>', unsafe_allow_html=True)

st.markdown('<h3>ูุธุงุฆู ุญุฏูุซู ุงูุชุฎุฑุฌ ูู ุณูู ุงูุนูู: ูุชุฑุจุน ุนูู ุนุฑุดูุง ุงููุธุงุฆู ุงูุฅุฏุงุฑูุฉ</h3>', unsafe_allow_html=True)
st.image(os.path.join('imgs','st2.png'))
st.markdown('<p class="custom-paragraph">ุนูู ูุง ูุจุฏู ุฃู ุงูุชุฎุตุตุงุช ุงูุฅุฏุงุฑูุฉ ุชุฏูุฑ ุงูุฃุนูุงู ูุณูู ุงูุนูู ุจููุณู! ูููุงุญุธ ุฃู  ุงููุญุงุณุจูู ูุงุฎุตุงุฆู ุงูุชุณููู ูู ุงูุฃูุซุฑ ุทูุจูุง ูู ุนุงูู 2022-2023</p>', unsafe_allow_html=True)

st.markdown('<h2> ูุง ุชุญูุฒุงุช ูู ุณูู ุงูุนูู!</h2>', unsafe_allow_html=True)
st.image(os.path.join('imgs','jobposting2.png'))
st.markdown('<p class="custom-paragraph">ูุฏ ูุชุจุงุฏุฑ ูุฃุฐูุงู ุงูุจุนุถ ุฃุณุฆูุฉ ุนูุง ุฅุฐุง ูุงู ุฌูุณู ุณูุคุซุฑ ูู ุญุตููู ุนูู ุงููุธููุฉ. ูุงุฐุง ุฅู ูุงู ุฅุญุฏู ุงูุชุฎุตุตุงุช ููุถู ุฌูุณู ุนูู ุขุฎุฑุ ูุงุฐุง ูู ุฃู ุงูุจุนุถ ูุฑู ุฃู ุงูุฌูุณ ุงููุนุงูุณ ูุณุฑู ูุฑุตู ูู ุงูุนููุ <b>ุงูุญูููุฉ</b> ุงูุจูุงูุงุช ุชุธูุฑ ุนูุณ ูุฐู ุงููุฎุงูู! ุชูุฌุฏ ุงุฎุชูุงูุงุช ุจุณูุทุฉ ูุง ุชุฐูุฑ ูุงููุชูุฌุฉ ูู ูุง ุชูุฌุฏ ุชุญูุฒุงุช ูุฌูุณู ุนูู ุขุฎุฑ ูู ุณูู ุงูุนูู</p>', unsafe_allow_html=True)

st.markdown("<h2>ุงูุฑุจุน ุงูุฃุฎูุฑ ูู ุงูุณูุฉ: ููุฌู ุงููุฑุต ุงููุธูููุฉ!</h2>" , unsafe_allow_html=True)
st.image(os.path.join('imgs', 'last_quarter.png'))
st.markdown('<p class="custom-paragraph">ุชูุชูู ุณูุฉ 2022 ูุน ููููุจุฑ ูุฏูุณูุจุฑ ููุฑู ุฐุฑูุฉ ุฅุนูุงูุงุช ุงูุชูุธูู ููููุง ูุชูุฏูููุง ุนูู ุงูุดูุฑ ุงูุฃูู ูู ุงูุฑุจุน ุงูุฃูู ูุณูุฉ 2023!</p>', unsafe_allow_html=True)

st.markdown("""
    <h2 style="font-family: 'Arial', sans-serif; text-align: center;">
        ูุงูุขู ุฃููุง ุงูุฎุฑูุฌุ ุณููู ุจุฑุจูู ุงูุจุฏุงูุงุชูุ ูุงุจุญุซ ุนู ูุธููุชูุ ูุงุดุญุฐ ุณูู ููุงุฑุงุชูุ ูุงุณุนู ุฅูููุง.
    </h2>
""", unsafe_allow_html=True)

degree_required_jobs = [
    'ูุญุงุณุจ', 'ุฃุฎุตุงุฆู ุนูููุงุช ููุงุฑุฏ ุจุดุฑูุฉ', 'ูุฏูุฑ ููุชุจ', 'ุฃุฎุตุงุฆู ุฅุฏุงุฑุฉ ูุดุงุฑูุน', 'ูุตูู ุฌุฑุงููู', 
    'ูุฏูุฑ ุญุณุงุจ ุนููู', 'ูุทูุฑ ุจุฑุงูุฌ', 'ุฃุฎุตุงุฆู ุฅุฏุงุฑุฉ ุงุฏุงุก', 'ููููุงุฆู', 'ูููุฏุณ ุฒุฑุงุนู', 'ูุฏูุฑ ุนุงู', 
    'ูุงุชุจ ุนูุงูุงุช ุญููููุฉ', 'ูููุฏุณ ููุฑุจุงุฆู', 'ูููุฏุณ ูููุงูููู', 'ุฃุฎุตุงุฆู ุชุณููู',
    'ุตูุฏูู', 'ูุฏูุฑ ุฑูุงุจุฉ ุงุฏุงุฑูุฉ', 'ูุฏูุฑ ุชุณููู', 'ูุฏูุฑ ุชุฏุฑูุจ', 'ูุญูู ูุธู ุงููุนูููุงุช',
    'ุฃุฎุตุงุฆู ุชูุธูู', 'ุฃุฎุตุงุฆู ุชุบุฐูุฉ', 'ูููุฏุณ ููุงุฏ', 'ุทุจูุจ ุฃุณูุงู ุนุงู', 'ุฃุฎุตุงุฆู ูุฎุชุจุฑุงุช ุทุจูุฉ', 
    'ูุญุงูู', 'ุฃุฎุตุงุฆู ุณูุนูุงุช', 'ูููุฏุณ ูุนูุงุฑู', 'ุฃุฎุตุงุฆู ูุงูููู', 'ุฃุฎุตุงุฆู ุดุคูู ูุงููููุฉ',
    'ุฃุฎุตุงุฆู ุชูููุฉ ุฅุดุนุงุนูุฉ', 'ูุฏูุฑ ุจุฑูุฌูุงุช', 'ุฃุฎุตุงุฆู ุนููู ุญุดุฑุงุช', 'ุฃุฎุตุงุฆู ุฅุนูุงูู', 'ุฃุฎุตุงุฆู ูุจูุนุงุช ูุณุชูุฒูุงุช ุทุจูุฉ', 
    'ุฃุฎุตุงุฆู ุจุตุฑูุงุช', 'ูุฑุงุฌุน ุฏุงุฎูู', 'ูุฏูุฑ ููุงุฑุฏ ุจุดุฑูุฉ ุฃูู ุณูุจุฑุงูู', 'ูุจุฑูุฌ ุชุทุจููุงุช', 'ูููุฏุณ ุตูุงุนู', 
    'ุฃุฎุตุงุฆู ุนูุงูุงุช ุนุงูุฉ', 'ูุฏูุฑ ุจุญุซ ูุชุทููุฑ', 'ูููุฏุณ ููููุงุฆู', 'ูููุฏุณ ุจูุฆู', 'ูููุฏุณ ุชูููุฉ ูุนูููุงุช', 
    'ูููุฏุณ ุฅุฏุงุฑุฉ ูุดุงุฑูุน', 'ุฃุฎุตุงุฆู ุชุฃููู', 'ุฑุฆูุณ ููุธูุฉ ุบูุฑ ุฑุจุญูุฉ', 'ุฃุฎุตุงุฆู ุฃูุฑุงุถ ูุทู ูุณูุน', 
    'ูุฏูุฑ ุฅุฏุงุฑุฉ ูุดุงุฑูุน'
]

# Filter the dataframe to only include jobs in the degree_required_jobs list
filtered_df = jadarat[jadarat['job_title'].isin(degree_required_jobs)]

# Get unique job titles from the filtered dataframe
unique_jobs = filtered_df['job_title'].unique()

# Dropdown list (selectbox) for unique jobs based on the filtered dataframe
selected_job = st.selectbox("ุงุฎุชุฑ ูุธููุชู", unique_jobs)

experience_label = st.radio("ุงุฎุชุฑ ุงูุฎุจุฑุฉ ุงููุทููุจุฉ:", ('ูุง ุชุชุทูุจ ุฎุจุฑุฉ', 'ุชุชุทูุจ ุฎุจุฑุฉ'))
experience_value = 0 if experience_label == 'ูุง ุชุชุทูุจ ุฎุจุฑุฉ' else 1


# Search button
if st.button('ุฌุฏ ูุธููุชู', key='search_button'):
    # Filter jobs based on the user's input
    if experience_value == 0:
        result = jadarat[(jadarat['job_title'] == selected_job) & (jadarat['experience (Years)'] == 0)]
    else:
        result = jadarat[(jadarat['job_title'] == selected_job) & (jadarat['experience (Years)'] != 0)]

    # Display results
    if result.empty:
        st.warning("ูุง ุชูุฌุฏ ูุธููุฉ ูุทุงุจูุฉ ูููุชุทูุจุงุช ุงููุฎุชุงุฑุฉ")
    else:
        st.success(f"ุนูุซูุฑ ุนูู {len(result)} ูุธููุฉ")
        # Create dynamic job cards
        for i, row in result.iterrows():
            gender_label = 'ุฅูุงุซ' if row['gender'] == 'F' else 'ุฐููุฑ' if row['gender'] == 'M' else 'ุงูุงุซูุงู'
            with st.container():
                st.markdown(
                    f"""
                    <div style="background-color: #eee; padding: 20px; border-radius: 15px; margin-bottom: 15px;">
                        <h3 style="color: #9692a1;">{row['job_title']}</h3>
                        <p><b>ุงูุดุฑูุฉ:</b> {row['comp_name']}</p>
                        <p><b>ุงููุตู ุงููุธููู:</b> {row['job_desc']}</p>
                        <p><b>ุงููุคููุงุช:</b> {row['qualifications_corrected']}</p>
                        <p><b>ุงูุฎุจุฑุฉ ุงููุทููุจุฉ:</b> {'ูุง ุชุชุทูุจ ุฎุจุฑุฉ' if row['experience (Years)'] == 0 else row['experience (Years)']}</p>
                        <p><b>ุงูุฌูุณ:</b> {gender_label}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

